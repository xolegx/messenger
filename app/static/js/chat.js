// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket
function connectWebSocket() {
    if (socket) socket.close();

    socket = new WebSocket(`ws://${window.location.host}/chat/ws/${selectedUserId}`);

    socket.onopen = () => {
        console.log('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }

    socket.onmessage = (event) => {
        const incomingMessage = JSON.parse(event.data);
        if (incomingMessage.recipient_id === selectedUserId) {
            addMessage(incomingMessage.content, incomingMessage.recipient_id);
        }
    };

    socket.onclose = () => 
        console.log('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function selectUser(userId, userName, event) {
    selectedUserId = userId;
    await updateStatus(userId, userName); 
    clearInterval(lastSeenInterval);
    lastSeenInterval = setInterval(() => {
        updateStatus(userId, userName);
    }, 10000);

    document.getElementById('messageInput').disabled = false;
    document.getElementById('file-btn').disabled = false;
    document.getElementById('send-btn').disabled = false;
    //readMessages(userId);
    const notification = document.getElementById(`notification-${userId}`);
    if (notification) {
        notification.style.display = "none";
    }

    const messagesContainer = document.querySelector('.messages');
    messagesContainer.style.backgroundImage = "url('/static/img/chatwall2.png')";
    clearTimeout(timeoutIdSelect);
    clearTimeout(timeoutIdAll);
    timeoutIdSelect = setTimeout(() => {statusOff(currentUserId);}, 180000);
    if (!event.target.classList.contains('active')) {
        document.querySelectorAll('.friend').forEach(item => item.classList.remove('active'));
        event.target.classList.add('active');
        const messagesContainer = document.getElementById('messages');
        messagesContainer.innerHTML = '';
        messagesContainer.style.display = 'block';

        await loadMessages(userId);
        connectWebSocket();
        startMessagePolling(userId);
        //readMessages(userId);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
    statusOn(currentUserId);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function addUserClickListeners() {
    document.querySelectorAll('.friend').forEach(item => {
        const userName = item.childNodes[3].childNodes[0].textContent.trim();
        const userId = item.getAttribute('data-user-id');
        item.onclick = event => selectUser(userId, userName, event);
    });
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function fetchUsers() {
    try {
        const response = await fetch('/friends');
        const users = await response.json();
        const userList = document.getElementById('friends-list');
        statusOn(currentUserId);
        userList.innerHTML = '';
        updateLastSeen();
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ" –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const favoriteElement = document.createElement('div');
        favoriteElement.classList.add('friend');
        favoriteElement.setAttribute('data-user-id', currentUserId);

        // –î–æ–±–∞–≤–ª—è–µ–º "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
        favoriteElement.innerHTML = `
            <span style="font-size: 30px;">${avatars[avatar]}</span>
                <div>–ú–æ–∏ –∑–∞–ø–∏—Å–∏</div>`;

        userList.appendChild(favoriteElement);
        const lastMessageResponse = await fetch(`/chat/messages/last_messages/`);
        const lastMessageData = await lastMessageResponse.json();
                //console.log(lastMessageData);
// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for (const user of users) {
            if (user.id !== currentUserId) {
                const userElement = document.createElement('div');
                userElement.classList.add('friend');
                userElement.setAttribute('data-user-id', user.id);
                userElement.setAttribute('status', `${user.online_status ? 'online' : 'offline'}`);
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å —É—á–µ—Ç–æ–º –∞–≤–∞—Ç–∞—Ä–∞, –∏–º–µ–Ω–∏ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                userElement.innerHTML = `
                    <span style="font-size: 30px;">${avatars[user.avatar]}</span>
                    <div id="user_name">
                        ${user.name}
                        <small class="lastMessage" style="color: #8e8e8e;">${lastMessageData[user.id] || "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"}</small>
                    </div>
                    <div class="online-status ${user.online_status ? 'online' : 'offline'}"></div>
                    <div class="mail" id='notification-${user.id}' style="display: none;">üí¨<span class="notification-badge" id="unread-count-${user.id}"></span></div>
                `;
                userList.appendChild(userElement);
            }

        };

        // –ü–æ–≤—Ç–æ—Ä–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        addUserClickListeners();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    }
}




async function statusOn(userId) {
    try {
        const response = await fetch(`/auth/user/status_on/${userId}`, { 
            method: 'PUT',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({ status: true }) // –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        });
        
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
    }
}

async function statusOff(userId) {
    try {
        const response = await fetch(`/auth/user/status_off/${userId}`, { 
            method: 'PUT',
            headers: {'Content-Type': 'application/json'},
        });
        
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
    }
}

async function checkStatus() {
    try {
        const response = await fetch('/auth/users/check_status/');
        
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
        }
        const usersStat = await response.json();     
        usersStat.users.forEach(user =>  {
            if (user.id !== currentUserId) {
                const userElement = document.querySelector(`.friend[data-user-id="${user.id}"]`);
                if (userElement) {
                    const statusElement = userElement.querySelector('.online-status');

                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞—Å—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                    if (user.online_status) {
                        statusElement.classList.add('online');
                        statusElement.classList.remove('offline');
                    } else {
                        statusElement.classList.add('offline');
                        statusElement.classList.remove('online');
                    }
                }
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤:', error);
    }
}

async function checkUnreadCountMessages() {
    const response = await fetch('/chat/messages/unread_counts/');
    const data = await response.json();
    const unreadCounts = data.unread_counts;
    for (const userId in unreadCounts) {
        const unreadCount = unreadCounts[userId];

        const notification = document.getElementById(`notification-${userId}`);
        const unreadCountEl = document.getElementById(`unread-count-${userId}`);
        const userElement = document.querySelector(`.friend[data-user-id="${userId}"]`);

        if (userElement && userElement.classList.contains('active')) {
            readMessages(userId);

            if (notification) {
                notification.style.display = "none";
                
            }
        } else {
            if (unreadCount > 0) {
                if (notification) {
                    notification.style.display = "block";
                    unreadCountEl.textContent = unreadCount;
                }
            } else {
                if (notification) {
                    notification.style.display = "none";
                }
            }
        }
    }
}

async function checkUnreadMessagesTitle() {
    try {
        const response = await fetch('/chat/messages/unread_counts/');
        const data = await response.json();

        const unreadCounts = data.unread_counts;
        const totalUnread = Object.values(unreadCounts).reduce((a, b) => a + b, 0);
        
        if (totalUnread > 0) {
            document.title = `(${totalUnread}) –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è`;
        } else {
            document.title = "CosmoChat";
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    }
}

async function readMessages(userId) {
    try {
        const response = await fetch(`/chat/messages/read/${userId}`, { 
        method: 'PUT',
        headers: {'Content-Type': 'application/json',}
        });
        if (response.ok) {
            const messagesContainer = document.getElementById('messages');
        } else {
            console.error('–û—à–∏–±–∫–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    }
}


async function loadMessages(userId) {
    try {
        const response = await fetch(`/chat/messages/${userId}`);
        const messages = await response.json();
        const messagesContainer = document.getElementById('messages');
        readMessages(userId);
        let lastDate = null; 
        const today = new Date();
        const yesterday = new Date();
        yesterday.setDate(yesterday.getDate() - 1);
        messagesContainer.innerHTML = messages.map((message) => {
            const currentDate = new Date(message.created_at); 
            const isYesterday = yesterday.toDateString() === currentDate.toDateString();
            formated_currentDate = formatDate(currentDate); 
            formated_today = formatDate(today);
            
            let dateDivider = '';

            // –ï—Å–ª–∏ –¥–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            if (lastDate !== formated_currentDate) {
                lastDate = formated_currentDate;
                if (formated_currentDate === formated_today) {
                    dateDivider = `<div class="date-divider">–°–µ–≥–æ–¥–Ω—è</div>`;
                } else if (isYesterday){
                    dateDivider = `<div class="date-divider">–í—á–µ—Ä–∞</div>`;
                } else {
                    dateDivider = `<div class="date-divider">${formated_currentDate}</div>`;
                }
            }

            return `${dateDivider}${createMessageElement(
                message.content,
                message.recipient_id,
                message.created_at,
                message.is_file,
                message.is_read,
                message.id
            )}`;
        }).join('');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    }
}

function formatDate(date) {
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // –ú–µ—Å—è—Ü—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
    const year = date.getFullYear();
    return `${day}.${month}.${year}`;
}


function createMessageElement(text, recipient_id, createdAt, is_file, is_read, message_id) {
    const date = new Date(createdAt);
    date.setHours(date.getHours() + 5); // –î–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    const hours = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');    
    const messageClass = currentUserId === recipient_id ? 'other-message' : 'my-message';

    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
    let content;
    if (is_file) {
        content = `<a href="" class="file-link">${text}</a>`;
    } else {
        content = text; // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å XSS
    }

    // –°—Ç–∞—Ç—É—Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    let readStatus = '';
    if (messageClass === 'my-message') {
        readStatus = `
                ${is_read ? '<div class="readed-green">VI</div>' : '<div class="readed-gray">V</div>'}
        `;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∏–∫–æ–Ω–æ–∫ "—É–¥–∞–ª–∏—Ç—å" –∏ "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
    const actionIcons = `
        <div class="message-actions">
            <span class="edit-icon" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" onclick="editMessage(${message_id})">‚úèÔ∏è</span>
            <span class="delete-icon" title="–£–¥–∞–ª–∏—Ç—å" onclick="deleteMessage(${message_id})">üóëÔ∏è</span>
        </div>
    `;

    // –°–æ–∑–¥–∞–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    const message = `
        <div class="message ${messageClass}" data-is-file="${is_file}" message_id="${message_id}">
            <div class="message-content">${content}</div>
            <div class="createdAt">${hours}:${minutes}</div>
            ${readStatus}
            ${actionIcons} <!-- –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è -->
        </div>
    `;
    return message;
}
    

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage() {
    const messageInput = document.getElementById('messageInput');
    const message = messageInput.value.trim();
    clearTimeout(timeoutIdSelect);
    timeoutIdSelect = setTimeout(() => {statusOff(currentUserId);}, 180000);
    fetchUsers();
    if (message && selectedUserId) {
        const payload = {recipient_id: selectedUserId, content: message};

        try {
            await fetch('/chat/messages', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(payload)
            });

            socket.send(JSON.stringify(payload));
            addMessage(message, selectedUserId);
            messageInput.value = '';
            //fetchUsers();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    }
}


async function uploadFile(file) {
    if (file.size > MAX_FILE_SIZE) {
        alert(`–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ ${MAX_FILE_SIZE / (1024 * 1024)} MB.`);
        return;
        }
    const formData = new FormData();

    const payload = {recipient_id: selectedUserId, content: `–§–∞–π–ª: ${file.name}`, is_file: true};
    try {
        const messageResponse = await fetch('/chat/messages', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(payload)
            });
         if (!messageResponse.ok) {
            const errorText = await messageResponse.text();
            throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${errorText}`);
        }
        const messageData = await messageResponse.json();
        formData.append('file', file);
        formData.append('message_id', messageData.id);
        formData.append('recipient_id', selectedUserId);
        const response = await fetch('/files/upload-file/', {
            method: 'POST',
            body: formData,
        });
        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: ${errorText}`);
        }
        //addMessage(`–§–∞–π–ª: ${file.name}`, selectedUserId, 1);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç

function addMessage(text, recipient_id, isFile = false) {
    const today = new Date();
    today.setHours(today.getHours() - 5);
    const messagesContainer = document.getElementById('messages');
    const messageContent = isFile ? `<a href="${text}" target="_blank">‚¨áÔ∏è${text}</a>` : text;
    messagesContainer.insertAdjacentHTML('beforeend', createMessageElement(messageContent, recipient_id, today, 0, 0, 0));
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}
    
function startMessagePolling(userId) {
    clearInterval(messagePollingInterval);
    messagePollingInterval = setInterval(() => loadMessages(userId), 1000);
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
async function logout() {
    try {
        const response = await fetch('/auth/logout', {
            method: 'POST',
            credentials: 'include'
        });

        if (response.ok) {
            window.location.href = '/auth';
        } else {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    }
}


async function updateLastSeen() {
    const data = {
        last_seen: new Date().toISOString()
    };

    try {
        const response = await fetch('/auth/last_seen', {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(data) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ JSON
        });

        if (!response.ok) {
            throw new Error(`Error: ${response.status} - ${response.statusText}`);
        }

        const result = await response.json();
    } catch (error) {
        console.error("Failed to update last seen:", error);
    }
}


async function getUserLastSeen(userId) {
    try {
        const response = await fetch(`/auth/user/last_seen/${userId}`);

        if (!response.ok) {
            throw new Error(`Error: ${response.status} - ${response.statusText}`);
        }
        const last_seen = await response.json();
        return last_seen.last_seen;
    } catch (error) {
        console.error("Failed to fetch users' last seen data:", error);
    }
}


function getUserStatus(dateLastSeen) {
    const now = new Date();
    const lastSeen = new Date(dateLastSeen);
    lastSeen.setHours(lastSeen.getHours() + 5);
    const diffInMilliseconds = now - lastSeen;
    const diffInMinutes = Math.floor(diffInMilliseconds / 60000);

    if (diffInMinutes < 3) {
        return "–æ–Ω–ª–∞–π–Ω";
    } else if (diffInMinutes < 5) {
        return "–±—ã–ª(–∞) –Ω–µ–¥–∞–≤–Ω–æ";
    } else if (diffInMinutes < 60) {
        return `–±—ã–ª(–∞) ${diffInMinutes} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`;
    } else {
        const isToday = now.toDateString() === lastSeen.toDateString();
        const yesterday = new Date();
        yesterday.setDate(yesterday.getDate() - 1);
        const isYesterday = yesterday.toDateString() === lastSeen.toDateString();

        if (isToday) {
            const hours = lastSeen.getHours().toString().padStart(2, '0');
            const minutes = lastSeen.getMinutes().toString().padStart(2, '0');
            return `–±—ã–ª(–∞) —Å–µ–≥–æ–¥–Ω—è –≤ ${hours}:${minutes}`;
        } else if (isYesterday) {
            const hours = lastSeen.getHours().toString().padStart(2, '0');
            const minutes = lastSeen.getMinutes().toString().padStart(2, '0');
            return `–±—ã–ª(–∞) –≤—á–µ—Ä–∞ –≤ ${hours}:${minutes}`;
        }else {
            const date = lastSeen.toLocaleDateString();
            const time = lastSeen.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            return `–±—ã–ª(–∞) ${date} –≤ ${time}`;
        }
    }
}


async function updateStatus(userId, userName) {
    const dateLast = await getUserLastSeen(userId);
    let status;
    if (dateLast) {
        status = getUserStatus(dateLast);
    } else {
        status = '–æ—Ñ–ª–∞–π–Ω';
    }
    document.getElementById('chat-header').innerHTML = `<span>${userName}</span><br>
    <small class="headStatus" style="color: #8e8e8e;">${status}</small>`;

}


async function editMessage(message_id) {
    const newContent = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:");
    if (newContent) {
        try {

            const response = await fetch(`/chat/messages/${message_id}?new_content=${newContent}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
               // body: JSON.stringify({ new_content: newContent }),
            });
            if (response.ok) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ DOM
                const messageElement = document.querySelector(`[message_id="${message_id}"] .message-content`);
                if (messageElement) {
                    messageElement.textContent = newContent;
                }
            } else {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è");
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞:", error);
        }
    }
}


async function deleteMessage(message_id) {
    if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?")) {
        try {
            const response = await fetch(`/chat/messages/${message_id}`, {
                method: 'DELETE',
            });

            if (response.ok) {
                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ DOM
                const messageElement = document.querySelector(`[message_id="${message_id}"]`);
                if (messageElement) {
                    messageElement.remove();
                }
            } else {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è");
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞:", error);
        }
    }
}



const MAX_FILE_SIZE = 100 * 1024 * 1024;
let timeoutIdSelect;
let timeoutIdAll;
// –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const friends = document.getElementById('friends-list');
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
let selectedUserId = null;
let lastMessage = null;
const userID = parseInt(selectedUserId, 10);
// –≠–º–æ–¥–∑–∏ –ø–∏–∫–µ—Ä
const emojiBtn = document.querySelector('.emoji-btn');
const emojiPicker = document.getElementById('emojiPicker');
const messageInput = document.querySelector('.message-input input');
const emojis = [ 'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'üòÇ', 'ü§£', 'üòä', 'üòá', 'üôÇ', 'üôÉ', 'üòâ', 'üòå', 'üòç', 'ü•∞', 'üòò', 'üòó', 'üòô', 'üòö', 'üòã', 'üòõ', 'üòù', 'üòú', 'ü§™', 'ü§®', 'üßê', 'ü§ì', 'üòé', 'ü•≥', 'üòè', 'üòí', 'üòû', 'üòî', 'üòü', 'üòï', 'üôÅ', 'üò£', 'üòñ', 'üò´', 'üò©', 'ü•∫', 'üò¢', 'üò≠', 'üò§', 'üò†', 'üò°', 'ü§¨', 'ü§Ø', 'üò≥', 'ü•µ', 'ü•∂', 'üò±', 'üò®', 'üò∞', 'üò•', 'üòì', 'ü§ó', 'ü§î', 'ü§≠', 'ü§´', 'ü§•', 'üò∂', 'üòê', 'üòë', 'üò¨', 'üôÑ', 'üòØ', 'üò¶', 'üòß', 'üòÆ', 'üò≤', 'ü•±', 'üò¥', 'ü§§', 'üò™', 'üòµ', 'ü§ê', 'ü•¥', 'ü§¢', 'ü§Æ', 'ü§ß', 'üò∑', 'ü§í', 'ü§ï', 'ü§ë', 'ü§†', 'üòà', 'üëø', 'üëπ', 'üë∫', 'ü§°', 'üí©', 'üëª', 'üíÄ', 'üëΩ', 'üëæ', 'ü§ñ', 'üéÉ', 'üò∫', 'üò∏', 'üòπ', 'üòª', 'üòº', 'üòΩ', 'üôÄ', 'üòø', 'üòæ', 'üí™','ü¶µ','ü¶∂','üëÇ','üëÉ','ü§è','üëà','üëâ','‚òù','üëÜ','üëá','‚úå','ü§û','üññ','ü§ò','ü§ô','üñê','‚úã','üëå','üëç','üëé','‚úä','üëä','ü§õ','ü§ú','ü§ö','ü§ü','‚úç','üôè','ü§ù','üë∂', 'üßí', 'üë¶', 'üëß', 'üßë', 'üë±', 'üë®', 'üë©', 'üßî', 'üëµ', 'üë¥', 'üë≤', 'üë≥‚Äç‚ôÄ', 'üë≥‚Äç‚ôÇ', 'üßï', 'üëÆ‚Äç‚ôÄ', 'üëÆ‚Äç‚ôÇ', 'üë∑‚Äç‚ôÄ', 'üë∑‚Äç‚ôÇ', 'üíÇ‚Äç‚ôÄ', 'üíÇ‚Äç‚ôÇ', 'üïµÔ∏è‚Äç‚ôÄ', 'üïµÔ∏è‚Äç‚ôÇ', 'üë©‚Äç‚öï', 'üë®‚Äç‚öï', 'üë©‚Äçüåæ', 'üë®‚Äçüåæ', 'üë©‚Äçüç≥', 'üë®‚Äçüç≥', 'üë©‚Äçüéì', 'üë®‚Äçüéì', 'üë©‚Äçüé§', 'üë®‚Äçüé§', 'üë©‚Äçüè´', 'üë®‚Äçüè´', 'üë©‚Äçüè≠', 'üë®‚Äçüè≠', 'üë©‚Äçüíª', 'üë®‚Äçüíª', 'üë©‚Äçüíº', 'üë®‚Äçüíº', 'üë©‚Äçüîß', 'üë®‚Äçüîß', 'üë©‚Äçüî¨', 'üë®‚Äçüî¨', 'üë©‚Äçüé®', 'üë®‚Äçüé®', 'üë©‚Äçüöí', 'üë®‚Äçüöí', 'üë©‚Äç‚úà', 'üë®‚Äç‚úà', 'üë©‚ÄçüöÄ', 'üë®‚ÄçüöÄ', 'üë©‚Äç‚öñ', 'üë®‚Äç‚öñ', 'ü§∂', 'üéÖ', 'üßô‚Äç‚ôÄ', 'üßô‚Äç‚ôÇ', 'üßù‚Äç‚ôÄ', 'üßù‚Äç‚ôÇ', 'üßõ‚Äç‚ôÄ', 'üßõ‚Äç‚ôÇ', 'üßü‚Äç‚ôÄ', 'üßü‚Äç‚ôÇ', 'üßû‚Äç‚ôÄ', 'üßû‚Äç‚ôÇ', 'üßú‚Äç‚ôÄ', 'üßú‚Äç‚ôÇ', 'üßö‚Äç‚ôÄ', 'üßö‚Äç‚ôÇ', 'üëº', 'ü§∞', 'ü§±', 'üôá‚Äç‚ôÄ', 'üôá‚Äç‚ôÇ', 'üíÅ‚Äç‚ôÄ', 'üíÅ‚Äç‚ôÇ', 'üôÖ‚Äç‚ôÄ', 'üôÖ‚Äç‚ôÇ', 'üôÜ‚Äç‚ôÄ', 'üôÜ‚Äç‚ôÇ', 'üôã‚Äç‚ôÄ', 'üôã‚Äç‚ôÇ', 'üßè‚Äç‚ôÄ', 'üßè‚Äç‚ôÇ', 'ü§¶‚Äç‚ôÄ', 'ü§¶‚Äç‚ôÇ', 'ü§∑‚Äç‚ôÄ', 'ü§∑‚Äç‚ôÇ', 'üôé‚Äç‚ôÄ', 'üôé‚Äç‚ôÇ', 'üôç‚Äç‚ôÄ', 'üôç‚Äç‚ôÇ', 'üíá‚Äç‚ôÄ', 'üíá‚Äç‚ôÇ', 'üíÜ‚Äç‚ôÄ', 'üíÜ‚Äç‚ôÇ', 'üßñ‚Äç‚ôÄ', 'üßñ‚Äç‚ôÇ', 'üíÖ', 'ü§≥', 'üíÉ', 'üï∫', 'üëØ‚Äç‚ôÄ', 'üëØ‚Äç‚ôÇ', 'üï¥Ô∏è', 'üë©‚Äçü¶Ω', 'üë®‚Äçü¶Ω', 'üë©‚Äçü¶º', 'üë®‚Äçü¶º', 'üßó‚Äç‚ôÄ', 'üßó‚Äç‚ôÇ', 'ü§∫', 'üèá','üíæ','üìñ','üö™'];

const avatars = ['üë©','üë®','üßë','üëß','üë¶','üßí','üë∂','üëµ','üë¥','üßì','üë©‚Äçü¶∞','üë®‚Äçü¶∞','üë©‚Äçü¶±','üë®‚Äçü¶±','üë©‚Äçü¶≤','üë®‚Äçü¶≤','üë©‚Äçü¶≥','üë®‚Äçü¶≥','üë±‚Äç‚ôÄÔ∏è','üë±‚Äç‚ôÇÔ∏è','üë∏','ü§¥','üë≥‚Äç‚ôÄÔ∏è','üë≥‚Äç‚ôÇÔ∏è','üë≤','üßî','üëº','ü§∂','üéÖ','üë©üèª','üë®üèª','üßëüèª','üëßüèª','üë¶üèª','üßíüèª','üë∂üèª','üëµüèª','üë¥üèª','üßìüèª','üë©üèª‚Äçü¶∞','üë®üèª‚Äçü¶∞','üë©üèª‚Äçü¶±','üë®üèª‚Äçü¶±','üë©üèª‚Äçü¶≤','üë®üèª‚Äçü¶≤','üë©üèª‚Äçü¶≥','üë®üèª‚Äçü¶≥','üë±üèª‚Äç‚ôÄÔ∏è','üë±üèª‚Äç‚ôÇÔ∏è','üë∏üèª','ü§¥üèª','üë≥üèª‚Äç‚ôÄÔ∏è','üë≥üèª‚Äç‚ôÇÔ∏è','üë≤üèª','üßîüèª','üëºüèª','ü§∂üèª','üéÖüèª','üë©üèø','üë®üèø','üßëüèø','üëßüèø','üë¶üèø','üßíüèø','üë∂üèø','üëµüèø','üë¥üèø','üßìüèø','üë©üèø‚Äçü¶∞','üë®üèø‚Äçü¶∞','üë©üèø‚Äçü¶±','üë®üèø‚Äçü¶±','üë©üèø‚Äçü¶≤','üë®üèø‚Äçü¶≤','üë©üèø‚Äçü¶≥','üë®üèø‚Äçü¶≥','üë±üèø‚Äç‚ôÄÔ∏è','üë±üèø‚Äç‚ôÇÔ∏è','üë∏üèø','ü§¥üèø','üë≥üèø‚Äç‚ôÄÔ∏è','üë≥üèø‚Äç‚ôÇÔ∏è','üë≤üèø','üßîüèø','üëºüèø','ü§∂üèø','üéÖüèø','üë§'];

let socket = null;
let messagePollingInterval = null;
let lastSeenInterval = null;

let status = true;

const settingsBtn = document.querySelector('.settings-btn');
const settingsMenu = document.querySelector('.settings-menu');

settingsBtn.addEventListener('click', () => {
    settingsMenu.classList.toggle('active');
});
document.addEventListener('click', (e) => {
    if (!settingsBtn.contains(e.target) && !settingsMenu.contains(e.target)) {
        settingsMenu.classList.remove('active');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
document.getElementById('send-btn').onclick = sendMessage;

document.getElementById('messageInput').onkeypress = async (e) => {
    if (e.key === 'Enter') {
        await sendMessage();
    }
};

// –ì–ª–∞–≤–Ω–∞—è
document.getElementById('main').addEventListener('click', function() {
    window.location.href = '/chat';
});

// –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –ø–∏–∫–µ—Ä
emojis.forEach(emoji => {
    const span = document.createElement('span');
    span.textContent = emoji;
    span.className = 'emoji';
    span.addEventListener('click', () => {
        messageInput.value += emoji;
    });
    emojiPicker.appendChild(span);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
emojiBtn.addEventListener('click', () => {
    emojiPicker.style.display = emojiPicker.style.display === 'block' ? 'none' : 'block';
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è –∏ —Å–Ω—è—Ç–∏—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è
emojiBtn.addEventListener('mouseenter', () => {
    emojiPicker.style.display = 'block';
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–Ω—è—Ç–∏—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è —Å –ø–∞–Ω–µ–ª–∏
emojiBtn.addEventListener('mouseleave', () => {
    setTimeout(() => {
        if (!emojiPicker.matches(':hover')) {
            emojiPicker.style.display = 'none';}},100);});
emojiPicker.addEventListener('mouseleave', () => {emojiPicker.style.display = 'none';});

// –ó–∞–∫—Ä—ã—Ç–∏–µ —ç–º–æ–¥–∑–∏ –ø–∏–∫–µ—Ä–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
document.addEventListener('click', (e) => {
    if (!emojiBtn.contains(e.target) && !emojiPicker.contains(e.target)) {
        emojiPicker.classList.remove('active');
    }
});


// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤
const fileBtn = document.querySelector('.file-btn');
const fileInput = document.querySelector('.file-input');
fileBtn.addEventListener('click', () => {
    fileInput.click();
});

fileInput.addEventListener('change', (event) => {
    const file = event.target.files[0];
    if (file) {
        uploadFile(file);
    }
});

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const buttons = document.querySelectorAll('.set-btn');

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è 'click' –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏
buttons.forEach(button => {
    button.addEventListener('click', async () => {
        const url = button.getAttribute('data-url'); // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ data-url
        if (button.textContent === 'üö™ –í—ã–π—Ç–∏') {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
                try {
                    // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ logout –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞
                    await logout();
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—ã—Ö–æ–¥–∞:', error);
                }
                alert('–í—ã –≤—ã—à–ª–∏');

            }
        }else{
            window.location.href = url;
        }
         // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    });
});



async function check(){
    const response = await fetch('/auth/users');
    const users = await response.json();
    users.forEach(user => {
        console.log(user);
            });
}

//check();
document.addEventListener('DOMContentLoaded', fetchUsers);

window.addEventListener('beforeunload', function (event) {
    statusOff(currentUserId);
});
timeoutIdAll = setTimeout(() => {statusOff(currentUserId);}, 180000);

setInterval(() => checkStatus(),4700);

setInterval(() => checkUnreadCountMessages(),2300);

setInterval(checkUnreadMessagesTitle, 3100);


