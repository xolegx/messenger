// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket
function connectWebSocket() {
    if (socket) socket.close();

    socket = new WebSocket(`ws://${window.location.host}/chat/ws/${selectedUserId}`);

    socket.onopen = () => {
        console.log('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }

    socket.onmessage = (event) => {
        const incomingMessage = JSON.parse(event.data);
        if (incomingMessage.recipient_id === selectedUserId) {
            addMessage(incomingMessage.content, incomingMessage.recipient_id);
        }
    };

    socket.onclose = () => 
        console.log('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function selectUser(userId, userName, event) {
    selectedUserId = userId;
    const userNametrim = userName.trim();
    const userNamesplit = userNametrim.split(' ');
    const headerName = userNamesplit.slice(1,46).join(' ');
    document.getElementById('chat-header').innerHTML = `<span>${headerName}</span>` ;
    document.getElementById('messageInput').disabled = false;
    document.getElementById('send-btn').disabled = false;
    readMessages(userId);
    const notification = document.getElementById(`notification-${userId}`);
    if (notification) {
        notification.style.display = "none";
    }

    const messagesContainer = document.querySelector('.messages');
    messagesContainer.style.backgroundImage = "url('/static/img/chatwall2.png')";
    clearTimeout(timeoutIdSelect);
    clearTimeout(timeoutIdAll);
    timeoutIdSelect = setTimeout(() => {statusOff(currentUserId);}, 120000);
    if (!event.target.classList.contains('active')){ document.querySelectorAll('.friend').forEach(item => item.classList.remove('active'));
        event.target.classList.add('active');
        const messagesContainer = document.getElementById('messages');
        messagesContainer.innerHTML = '';
        messagesContainer.style.display = 'block';

        await loadMessages(userId);
        connectWebSocket();
        startMessagePolling(userId);
        readMessages(userId);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;}
        statusOn(currentUserId);
    }

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function addUserClickListeners() {
    document.querySelectorAll('.friend').forEach(item => {
        const userId = item.getAttribute('data-user-id');
        item.onclick = event => selectUser(userId, item.textContent, event);
    });
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function fetchUsers() {
    try {
        const response = await fetch('/auth/users');
        const users = await response.json();
        const userList = document.getElementById('friends-list');
        statusOn(currentUserId);
        userList.innerHTML = '';
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ" –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const favoriteElement = document.createElement('div');
        favoriteElement.classList.add('friend');
        favoriteElement.setAttribute('data-user-id', currentUserId);

        // –î–æ–±–∞–≤–ª—è–µ–º "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
        favoriteElement.innerHTML = `
            <span style="font-size: 30px;">${avatars[avatar]}</span>
                <div>–ú–æ–∏ –∑–∞–ø–∏—Å–∏</div>`;

        userList.appendChild(favoriteElement);

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users.forEach(user => {
            if (user.id !== currentUserId) {
                const userElement = document.createElement('div');
                userElement.classList.add('friend');
                userElement.setAttribute('data-user-id', user.id);
                userElement.setAttribute('status', user.online_status);
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å —É—á–µ—Ç–æ–º –∞–≤–∞—Ç–∞—Ä–∞, –∏–º–µ–Ω–∏ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                userElement.innerHTML = `
                    <span style="font-size: 30px;">${avatars[user.avatar]}</span>
                    <div>
                    ${user.name}
                    <!--small class="lastMessage"style="color: #8e8e8e;">${lastMessage || "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"}</small-->
                    </div>
                    <div class="online-status ${user.online_status ? 'online' : 'offline'}" ></div>
                    
                    <div class="mail" id='notification-${user.id}' style="display: none;">üí¨<span class="notification-badge" id="unread-count-${user.id}"></span>
                    </div>
                    `;
                userList.appendChild(userElement);
            }

        });
        //setInterval(() => {users.forEach(user => {checkUnreadMessages(user.id);});},1000);
        // –ü–æ–≤—Ç–æ—Ä–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        addUserClickListeners();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    }
}




async function statusOn(userId) {
    try {
        const response = await fetch(`/auth/user/status_on/${userId}`, { 
            method: 'PUT',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({ status: true }) // –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        });
        
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();
        console.log('–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è online');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
    }
}

async function statusOff(userId) {
    try {
        const response = await fetch(`/auth/user/status_off/${userId}`, { 
            method: 'PUT',
            headers: {'Content-Type': 'application/json'},
        });
        
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();
        console.log('–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è offline');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
    }
}

async function checkStatus() {
    try {
        const response = await fetch('/auth/users/check_status/');
        
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
        }

        const usersStat = await response.json();     
        usersStat.users.forEach(user =>  {
            if (user.id !== currentUserId) {
                const userElement = document.querySelector(`.friend[data-user-id="${user.id}"]`);
                if (userElement) {
                    const statusElement = userElement.querySelector('.online-status');

                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞—Å—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                    if (user.online_status) {
                        statusElement.classList.add('online');
                        statusElement.classList.remove('offline');
                    } else {
                        statusElement.classList.add('offline');
                        statusElement.classList.remove('online');
                    }
                }
            }
        });   
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤:', error);
    }
}

async function checkUnreadCountMessages() {
    const response = await fetch('/chat/messages/unread_counts/');
    const data = await response.json();
    const unreadCounts = data.unread_counts;
    for (const userId in unreadCounts) {
        const unreadCount = unreadCounts[userId];
        
        const notification = document.getElementById(`notification-${userId}`);
        const unreadCountEl = document.getElementById(`unread-count-${userId}`);
        const userElement = document.querySelector(`.friend[data-user-id="${userId}"]`);
        
        if (userElement && userElement.classList.contains('active')) {
            readMessages(userId);
            notification.style.display = "none";
        } else {
            if (unreadCount > 0) {
                notification.style.display = "block";
                unreadCountEl.textContent = unreadCount;
            } else {
                notification.style.display = "none";
            }
        }
    }
}

async function readMessages(userId) {
    try {
        const response = await fetch(`/chat/messages/read/${userId}`, { // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–µ—Ä–µ–¥–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        method: 'PUT',
        headers: {'Content-Type': 'application/json',}
        });
        if (response.ok) {
            console.log('–°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω—ã');
        } else {
            console.error('–û—à–∏–±–∫–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    }
}

async function loadMessages(userId) {
    try {
        const response = await fetch(`/chat/messages/${userId}`);
        const messages = await response.json();
        const messagesContainer = document.getElementById('messages');
        messagesContainer.innerHTML = messages.map(message =>
            createMessageElement(message.content, message.recipient_id, message.created_at)
        ).join('');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage() {
    const messageInput = document.getElementById('messageInput');
    const message = messageInput.value.trim();
    clearTimeout(timeoutIdSelect);
    timeoutIdSelect = setTimeout(() => {statusOff(currentUserId);}, 120000);
    if (message && selectedUserId) {
        const payload = {recipient_id: selectedUserId, content: message};

        try {
            await fetch('/chat/messages', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(payload)
            });

            socket.send(JSON.stringify(payload));
            addMessage(message, selectedUserId);
            messageInput.value = '';

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç

function addMessage(text, recipient_id, isFile = false) {
    const messagesContainer = document.getElementById('messages');
    const messageContent = isFile ? `<a href="${text}" target="_blank">üìé ${text}</a>` : text;
    messagesContainer.insertAdjacentHTML('beforeend', createMessageElement(messageContent, recipient_id, 0));
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}


// –°–æ–∑–¥–∞–Ω–∏–µ HTML —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

function createMessageElement(text, recipient_id, createdAt) {
    const date = new Date(createdAt);
    const hours = date.getHours();
    const minutes = date.getMinutes().toString().padStart(2, '0');
    const messageClass = currentUserId === recipient_id ? 'other-message' : 'my-message';
    return `<div class="message ${messageClass}">${text}<div class="createdAt">${hours+5}:${minutes}</div></div>`;
    }
    
function startMessagePolling(userId) {
    clearInterval(messagePollingInterval);
    messagePollingInterval = setInterval(() => loadMessages(userId), 1000);
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
async function logout() {
    try {
        const response = await fetch('/auth/logout', {
            method: 'POST',
            credentials: 'include'
        });

        if (response.ok) {
            window.location.href = '/auth';
        } else {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    }
}





let timeoutIdSelect;
let timeoutIdAll;
// –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const friends = document.getElementById('friends-list');
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
let selectedUserId = null;
let lastMessage = null;
const userID = parseInt(selectedUserId, 10);
// –≠–º–æ–¥–∑–∏ –ø–∏–∫–µ—Ä
const emojiBtn = document.querySelector('.emoji-btn');
const emojiPicker = document.getElementById('emojiPicker');
const messageInput = document.querySelector('.message-input input');
const emojis = [ 'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'üòÇ', 'ü§£', 'üòä', 'üòá', 'üôÇ', 'üôÉ', 'üòâ', 'üòå', 'üòç', 'ü•∞', 'üòò', 'üòó', 'üòô', 'üòö', 'üòã', 'üòõ', 'üòù', 'üòú', 'ü§™', 'ü§®', 'üßê', 'ü§ì', 'üòé', 'ü•≥', 'üòè', 'üòí', 'üòû', 'üòî', 'üòü', 'üòï', 'üôÅ', 'üò£', 'üòñ', 'üò´', 'üò©', 'ü•∫', 'üò¢', 'üò≠', 'üò§', 'üò†', 'üò°', 'ü§¨', 'ü§Ø', 'üò≥', 'ü•µ', 'ü•∂', 'üò±', 'üò®', 'üò∞', 'üò•', 'üòì', 'ü§ó', 'ü§î', 'ü§≠', 'ü§´', 'ü§•', 'üò∂', 'üòê', 'üòë', 'üò¨', 'üôÑ', 'üòØ', 'üò¶', 'üòß', 'üòÆ', 'üò≤', 'ü•±', 'üò¥', 'ü§§', 'üò™', 'üòµ', 'ü§ê', 'ü•¥', 'ü§¢', 'ü§Æ', 'ü§ß', 'üò∑', 'ü§í', 'ü§ï', 'ü§ë', 'ü§†', 'üòà', 'üëø', 'üëπ', 'üë∫', 'ü§°', 'üí©', 'üëª', 'üíÄ', 'üëΩ', 'üëæ', 'ü§ñ', 'üéÉ', 'üò∫', 'üò∏', 'üòπ', 'üòª', 'üòº', 'üòΩ', 'üôÄ', 'üòø', 'üòæ', 'üí™','ü¶µ','ü¶∂','üëÇ','üëÉ','ü§è','üëà','üëâ','‚òù','üëÜ','üëá','‚úå','ü§û','üññ','ü§ò','ü§ô','üñê','‚úã','üëå','üëç','üëé','‚úä','üëä','ü§õ','ü§ú','ü§ö','ü§ü','‚úç','üôè','ü§ù','üë∂', 'üßí', 'üë¶', 'üëß', 'üßë', 'üë±', 'üë®', 'üë©', 'üßî', 'üëµ', 'üë¥', 'üë≤', 'üë≥‚Äç‚ôÄ', 'üë≥‚Äç‚ôÇ', 'üßï', 'üëÆ‚Äç‚ôÄ', 'üëÆ‚Äç‚ôÇ', 'üë∑‚Äç‚ôÄ', 'üë∑‚Äç‚ôÇ', 'üíÇ‚Äç‚ôÄ', 'üíÇ‚Äç‚ôÇ', 'üïµÔ∏è‚Äç‚ôÄ', 'üïµÔ∏è‚Äç‚ôÇ', 'üë©‚Äç‚öï', 'üë®‚Äç‚öï', 'üë©‚Äçüåæ', 'üë®‚Äçüåæ', 'üë©‚Äçüç≥', 'üë®‚Äçüç≥', 'üë©‚Äçüéì', 'üë®‚Äçüéì', 'üë©‚Äçüé§', 'üë®‚Äçüé§', 'üë©‚Äçüè´', 'üë®‚Äçüè´', 'üë©‚Äçüè≠', 'üë®‚Äçüè≠', 'üë©‚Äçüíª', 'üë®‚Äçüíª', 'üë©‚Äçüíº', 'üë®‚Äçüíº', 'üë©‚Äçüîß', 'üë®‚Äçüîß', 'üë©‚Äçüî¨', 'üë®‚Äçüî¨', 'üë©‚Äçüé®', 'üë®‚Äçüé®', 'üë©‚Äçüöí', 'üë®‚Äçüöí', 'üë©‚Äç‚úà', 'üë®‚Äç‚úà', 'üë©‚ÄçüöÄ', 'üë®‚ÄçüöÄ', 'üë©‚Äç‚öñ', 'üë®‚Äç‚öñ', 'ü§∂', 'üéÖ', 'üßô‚Äç‚ôÄ', 'üßô‚Äç‚ôÇ', 'üßù‚Äç‚ôÄ', 'üßù‚Äç‚ôÇ', 'üßõ‚Äç‚ôÄ', 'üßõ‚Äç‚ôÇ', 'üßü‚Äç‚ôÄ', 'üßü‚Äç‚ôÇ', 'üßû‚Äç‚ôÄ', 'üßû‚Äç‚ôÇ', 'üßú‚Äç‚ôÄ', 'üßú‚Äç‚ôÇ', 'üßö‚Äç‚ôÄ', 'üßö‚Äç‚ôÇ', 'üëº', 'ü§∞', 'ü§±', 'üôá‚Äç‚ôÄ', 'üôá‚Äç‚ôÇ', 'üíÅ‚Äç‚ôÄ', 'üíÅ‚Äç‚ôÇ', 'üôÖ‚Äç‚ôÄ', 'üôÖ‚Äç‚ôÇ', 'üôÜ‚Äç‚ôÄ', 'üôÜ‚Äç‚ôÇ', 'üôã‚Äç‚ôÄ', 'üôã‚Äç‚ôÇ', 'üßè‚Äç‚ôÄ', 'üßè‚Äç‚ôÇ', 'ü§¶‚Äç‚ôÄ', 'ü§¶‚Äç‚ôÇ', 'ü§∑‚Äç‚ôÄ', 'ü§∑‚Äç‚ôÇ', 'üôé‚Äç‚ôÄ', 'üôé‚Äç‚ôÇ', 'üôç‚Äç‚ôÄ', 'üôç‚Äç‚ôÇ', 'üíá‚Äç‚ôÄ', 'üíá‚Äç‚ôÇ', 'üíÜ‚Äç‚ôÄ', 'üíÜ‚Äç‚ôÇ', 'üßñ‚Äç‚ôÄ', 'üßñ‚Äç‚ôÇ', 'üíÖ', 'ü§≥', 'üíÉ', 'üï∫', 'üëØ‚Äç‚ôÄ', 'üëØ‚Äç‚ôÇ', 'üï¥Ô∏è', 'üë©‚Äçü¶Ω', 'üë®‚Äçü¶Ω', 'üë©‚Äçü¶º', 'üë®‚Äçü¶º', 'üßó‚Äç‚ôÄ', 'üßó‚Äç‚ôÇ', 'ü§∫', 'üèá','üíæ','üìñ','üö™'];

const avatars = ['üë©','üë®','üßë','üëß','üë¶','üßí','üë∂','üëµ','üë¥','üßì','üë©‚Äçü¶∞','üë®‚Äçü¶∞','üë©‚Äçü¶±','üë®‚Äçü¶±','üë©‚Äçü¶≤','üë®‚Äçü¶≤','üë©‚Äçü¶≥','üë®‚Äçü¶≥','üë±‚Äç‚ôÄÔ∏è','üë±‚Äç‚ôÇÔ∏è','üë∏','ü§¥','üë≥‚Äç‚ôÄÔ∏è','üë≥‚Äç‚ôÇÔ∏è','üë≤','üßî','üëº','ü§∂','üéÖ','üë©üèª','üë®üèª','üßëüèª','üëßüèª','üë¶üèª','üßíüèª','üë∂üèª','üëµüèª','üë¥üèª','üßìüèª','üë©üèª‚Äçü¶∞','üë®üèª‚Äçü¶∞','üë©üèª‚Äçü¶±','üë®üèª‚Äçü¶±','üë©üèª‚Äçü¶≤','üë®üèª‚Äçü¶≤','üë©üèª‚Äçü¶≥','üë®üèª‚Äçü¶≥','üë±üèª‚Äç‚ôÄÔ∏è','üë±üèª‚Äç‚ôÇÔ∏è','üë∏üèª','ü§¥üèª','üë≥üèª‚Äç‚ôÄÔ∏è','üë≥üèª‚Äç‚ôÇÔ∏è','üë≤üèª','üßîüèª','üëºüèª','ü§∂üèª','üéÖüèª','üë©üèø','üë®üèø','üßëüèø','üëßüèø','üë¶üèø','üßíüèø','üë∂üèø','üëµüèø','üë¥üèø','üßìüèø','üë©üèø‚Äçü¶∞','üë®üèø‚Äçü¶∞','üë©üèø‚Äçü¶±','üë®üèø‚Äçü¶±','üë©üèø‚Äçü¶≤','üë®üèø‚Äçü¶≤','üë©üèø‚Äçü¶≥','üë®üèø‚Äçü¶≥','üë±üèø‚Äç‚ôÄÔ∏è','üë±üèø‚Äç‚ôÇÔ∏è','üë∏üèø','ü§¥üèø','üë≥üèø‚Äç‚ôÄÔ∏è','üë≥üèø‚Äç‚ôÇÔ∏è','üë≤üèø','üßîüèø','üëºüèø','ü§∂üèø','üéÖüèø','üë§'];

let socket = null;
let messagePollingInterval = null;

let status = true;

const fileBtn = document.querySelector('.file-btn');
const fileInput = document.querySelector('.file-input');
const settingsBtn = document.querySelector('.settings-btn');
const settingsMenu = document.querySelector('.settings-menu');

settingsBtn.addEventListener('click', () => {
    settingsMenu.classList.toggle('active');
});
document.addEventListener('click', (e) => {
    if (!settingsBtn.contains(e.target) && !settingsMenu.contains(e.target)) {
        settingsMenu.classList.remove('active');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
document.getElementById('send-btn').onclick = sendMessage;

document.getElementById('messageInput').onkeypress = async (e) => {
    if (e.key === 'Enter') {
        await sendMessage();
    }
};

// –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –ø–∏–∫–µ—Ä
emojis.forEach(emoji => {
    const span = document.createElement('span');
    span.textContent = emoji;
    span.className = 'emoji';
    span.addEventListener('click', () => {
        messageInput.value += emoji;
    });
    emojiPicker.appendChild(span);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
emojiBtn.addEventListener('click', () => {
    emojiPicker.style.display = emojiPicker.style.display === 'block' ? 'none' : 'block';
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è –∏ —Å–Ω—è—Ç–∏—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è
emojiBtn.addEventListener('mouseenter', () => {
    emojiPicker.style.display = 'block';
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–Ω—è—Ç–∏—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è —Å –ø–∞–Ω–µ–ª–∏
emojiBtn.addEventListener('mouseleave', () => {
    setTimeout(() => {
        if (!emojiPicker.matches(':hover')) {
            emojiPicker.style.display = 'none';}},100);});
emojiPicker.addEventListener('mouseleave', () => {emojiPicker.style.display = 'none';});

// –ó–∞–∫—Ä—ã—Ç–∏–µ —ç–º–æ–¥–∑–∏ –ø–∏–∫–µ—Ä–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
document.addEventListener('click', (e) => {
    if (!emojiBtn.contains(e.target) && !emojiPicker.contains(e.target)) {
        emojiPicker.classList.remove('active');
    }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤
fileBtn.addEventListener('click', () => {
    fileInput.click();
});


fileInput.addEventListener('change', async (e) => {
    const files = Array.from(e.target.files);
    
    files.forEach(async file => {
        const formData = new FormData();
        formData.append('file', file);
        formData.append('message_id', messageId || null); // Use null if messageId is not available
        formData.append('sender_id', currentUserId || null);
        formData.append('recipient_id', selectedUserId || null);


        try {
            const response = await fetch('/files/upload/', {
                method: 'POST',
                body: formData,
            });

            const result = await response.json();
            if (result.status === 'ok') {
                console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:', result.filename);
                addMessage(`–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${result.filename}`, selectedUserId, true);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
        }
    });

    fileInput.value = ''; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ input
});


    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const buttons = document.querySelectorAll('.set-btn');

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è 'click' –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏
buttons.forEach(button => {
    button.addEventListener('click', async () => {
        const url = button.getAttribute('data-url'); // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ data-url
        if (button.textContent === 'üö™ –í—ã–π—Ç–∏') {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
                try {
                    // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ logout –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞
                    await logout();
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—ã—Ö–æ–¥–∞:', error);
                }
                alert('–í—ã –≤—ã—à–ª–∏');

            }
        }else{
            window.location.href = url;
        }
         // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    });
});



async function check(){
    const response = await fetch('/auth/users');
    const users = await response.json();
    users.forEach(user => {
        console.log(user);
            });
}

//check();
document.addEventListener('DOMContentLoaded', fetchUsers);
window.addEventListener('beforeunload', function (event) {
    statusOff(currentUserId);
});
timeoutIdAll = setTimeout(() => {statusOff(currentUserId);}, 120000);
setInterval(() => checkStatus(),5000);
setInterval(() => checkUnreadCountMessages(),1000);