async function logout() {
    try {
        const response = await fetch('/auth/logout', {
            method: 'POST',
            credentials: 'include'
        });

        if (response.ok) {
            window.location.href = '/auth';
        } else {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    }
}


async function checkUnreadMessages() {
            try {
                const response = await fetch('/chat/messages/unread_counts/');
                const data = await response.json();

                const unreadCounts = data.unread_counts;
                const totalUnread = Object.values(unreadCounts).reduce((a, b) => a + b, 0);
                
                // –ò–∑–º–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if (totalUnread > 0) {
                    document.title = `(${totalUnread}) –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è`;
                } else {
                    document.title = "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å";
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
            }
        }
setInterval(checkUnreadMessages, 3000);


function setAva(avatar) {
    fetch(`/auth/users/${currentUserId}/avatar?new_avatar=${avatar}`, { 
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
        },
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞');
        }
        return response.json();
    })
    .then(data =>  {
        avatarEl.textContent = avatars[data.avatar]; 
    })
    .catch(error =>  {
        console.error('–û—à–∏–±–∫–∞:', error);
    });
}

async function takeAvatar(){
    const response = await fetch(`/auth/user/${currentUserId}`);
    const user = await response.json();
    avatarEl.textContent = avatars[user.avatar];
}

async function changePassword() { 
    const oldPassword = document.getElementById('oldPassword').value; 
    const newPassword = document.getElementById('newPassword').value; 
    const confirmNewPassword = document.getElementById('confirmNewPassword').value; 
    const messageDiv = document.getElementById('passwordChangeMessage');

        if (!oldPassword || !newPassword) {
           messageDiv.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±–∞ –ø–æ–ª—è.';
           return;
        }

         if (newPassword !== confirmNewPassword) {
        messageDiv.textContent = '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.';
        return;
    }
        try { const response = await fetch('/auth/change-password', { 
            method: 'POST', 
            headers: { 'Content-Type': 'application/json', }, 
            body: JSON.stringify({ old_password: oldPassword, new_password: newPassword, 
            }), 
        });

        if (!response.ok) {
           const errorData = await response.json();
           console.log(errorData)
           messageDiv.textContent = `–û—à–∏–±–∫–∞: ${errorData.detail || JSON.stringify(errorData)}`;
        } else {
           messageDiv.textContent = '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.';
        }

} catch (error) { console.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è:', error); messageDiv.textContent = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è.'; }
}

async function changeName() {
    const newName = document.getElementById('newName').value;
    const messageDiv = document.getElementById('nameChangeMessage');

    if (!newName) {
        messageDiv.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è.';
        return;
    }

    try {
        const response = await fetch('/auth/change-name', { 
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ new_name: newName }), 
        });

        if (!response.ok) {
            const errorData = await response.json();
            console.log(errorData);
            messageDiv.textContent = `${errorData.detail}`;
        } else {
            messageDiv.textContent = '–ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!';
  
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏:', error);
        messageDiv.textContent = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∏–º–µ–Ω–∏.';
    }
}

async function changeDepartment() {
    const newDepartment = document.getElementById('newDepartment').value;
    const messageDiv = document.getElementById('departmentChangeMessage');

    if (!newDepartment) {
        messageDiv.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–¥–µ–ª.';
        return;
    }

    try {
        const response = await fetch('/auth/change-department', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ new_department: newDepartment }), 
        });

        if (!response.ok) {
            const errorData = await response.json();
            console.log(errorData);
            messageDiv.textContent = `–û—à–∏–±–∫–∞: ${errorData.detail}`;
        } else {
            messageDiv.textContent = '–û—Ç–¥–µ–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –æ—Ç–¥–µ–ª–∞:', error);
        messageDiv.textContent = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –æ—Ç–¥–µ–ª–∞.';
    }
}




const avatars = ['üë©','üë®','üßë','üëß','üë¶','üßí','üë∂','üëµ','üë¥','üßì','üë©‚Äçü¶∞','üë®‚Äçü¶∞','üë©‚Äçü¶±','üë®‚Äçü¶±','üë©‚Äçü¶≤','üë®‚Äçü¶≤','üë©‚Äçü¶≥','üë®‚Äçü¶≥','üë±‚Äç‚ôÄÔ∏è','üë±‚Äç‚ôÇÔ∏è','üë∏','ü§¥','üë≥‚Äç‚ôÄÔ∏è','üë≥‚Äç‚ôÇÔ∏è','üë≤','üßî','üëº','ü§∂','üéÖ','üë©üèª','üë®üèª','üßëüèª','üëßüèª','üë¶üèª','üßíüèª','üë∂üèª','üëµüèª','üë¥üèª','üßìüèª','üë©üèª‚Äçü¶∞','üë®üèª‚Äçü¶∞','üë©üèª‚Äçü¶±','üë®üèª‚Äçü¶±','üë©üèª‚Äçü¶≤','üë®üèª‚Äçü¶≤','üë©üèª‚Äçü¶≥','üë®üèª‚Äçü¶≥','üë±üèª‚Äç‚ôÄÔ∏è','üë±üèª‚Äç‚ôÇÔ∏è','üë∏üèª','ü§¥üèª','üë≥üèª‚Äç‚ôÄÔ∏è','üë≥üèª‚Äç‚ôÇÔ∏è','üë≤üèª','üßîüèª','üëºüèª','ü§∂üèª','üéÖüèª','üë©üèø','üë®üèø','üßëüèø','üëßüèø','üë¶üèø','üßíüèø','üë∂üèø','üëµüèø','üë¥üèø','üßìüèø','üë©üèø‚Äçü¶∞','üë®üèø‚Äçü¶∞','üë©üèø‚Äçü¶±','üë®üèø‚Äçü¶±','üë©üèø‚Äçü¶≤','üë®üèø‚Äçü¶≤','üë©üèø‚Äçü¶≥','üë®üèø‚Äçü¶≥','üë±üèø‚Äç‚ôÄÔ∏è','üë±üèø‚Äç‚ôÇÔ∏è','üë∏üèø','ü§¥üèø','üë≥üèø‚Äç‚ôÄÔ∏è','üë≥üèø‚Äç‚ôÇÔ∏è','üë≤üèø','üßîüèø','üëºüèø','ü§∂üèø','üéÖüèø','üë§'];
const avatarEl = document.getElementById('ava');
const avaPicker = document.getElementById('avaPicker');
const avatarButton = document.getElementById('chose_avatar');

takeAvatar(); 

avatarButton.addEventListener('click', (event) => {
    event.stopPropagation();
    avaPicker.style.display = avaPicker.style.display === 'none' || 
    avaPicker.style.display === '' ? 'block' : 'none';
});
document.addEventListener('click', () => {avaPicker.style.display = 'none';});

avatars.forEach((ava, index) =>  {
    const button = document.createElement('button');
    button.textContent = ava;
    button.className = 'ava-button';
    button.onclick = () =>  {
        setAva(index); // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –∏–Ω–¥–µ–∫—Å–æ–º
    };
    avaPicker.appendChild(button);
});

const profileButtons = document.querySelectorAll('.profile-button');

const buttons = document.querySelectorAll('.set-btn');
const settingsBtn = document.querySelector('.settings-btn');
const settingsMenu = document.querySelector('.settings-menu');
settingsBtn.addEventListener('click', () => {
    settingsMenu.classList.toggle('active');
});
document.addEventListener('click', (e) => {
    if (!settingsBtn.contains(e.target) && !settingsMenu.contains(e.target)) {
        settingsMenu.classList.remove('active');
    }
});

// Add click handlers for profile buttons
profileButtons.forEach(button => {
    button.addEventListener('click', () => {
        if (button.textContent === '–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç') {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
             try {
                const response = fetch(`/auth/user/`, {
                    method: 'DELETE'
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
            }
                        alert('–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω');
                        window.location.href = '/'
                    }
        } 
    });
});

buttons.forEach(button => {
    button.addEventListener('click', async () => {
        const url = button.getAttribute('data-url'); // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ data-url
        if (button.textContent === 'üö™ –í—ã–π—Ç–∏') {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
                try {
                    // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ logout –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞
                    await logout();
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—ã—Ö–æ–¥–∞:', error);
                }
                alert('–í—ã –≤—ã—à–ª–∏');
                
            }
        }else{
            window.location.href = url;
        } 
         // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    });
});

document.getElementById('main').addEventListener('click', function() {
    window.location.href = '/chat';
});




