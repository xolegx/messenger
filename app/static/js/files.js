const settingsBtn = document.querySelector('.settings-btn');
const settingsMenu = document.querySelector('.settings-menu');
const buttons = document.querySelectorAll('.set-btn');

// –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
async function logout() {
    try {
        const response = await fetch('/auth/logout', {
            method: 'POST',
            credentials: 'include'
        });

        if (response.ok) {
            window.location.href = '/auth';
        } else {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    }
}

document.getElementById('main').addEventListener('click', function() {
    window.location.href = '/chat';
});

settingsBtn.addEventListener('click', () => {
    settingsMenu.classList.toggle('active');
});

document.addEventListener('click', (e) => {
    if (!settingsBtn.contains(e.target) && !settingsMenu.contains(e.target)) {
        settingsMenu.classList.remove('active');
    }
});

buttons.forEach(button => {
    button.addEventListener('click', async () => {
        const url = button.getAttribute('data-url'); // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ data-url
        if (button.textContent === 'üö™ –í—ã–π—Ç–∏') {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
                try {
                    // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ logout –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞
                    await logout();
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—ã—Ö–æ–¥–∞:', error);
                }
                alert('–í—ã –≤—ã—à–ª–∏');
                
            }
        }else{
            window.location.href = url;
        } 
         // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    });
});

// Search functionality
const searchBar = document.querySelector('.search-bar');
const fileItems = document.querySelectorAll('.file-item');

searchBar.addEventListener('input', (e) => {
    const searchTerm = e.target.value.toLowerCase();
    fileItems.forEach(item => {
        const fileName = item.querySelector('.file-name').textContent.toLowerCase();
        const fileMeta = item.querySelector('.file-meta').textContent.toLowerCase();
        const shouldShow = fileName.includes(searchTerm) || fileMeta.includes(searchTerm);
        item.style.display = shouldShow ? 'flex' : 'none';
    });
});

// File actions
const deleteButtons = document.querySelectorAll('.file-button[title="–£–¥–∞–ª–∏—Ç—å"]');
const downloadButtons = document.querySelectorAll('.file-button[title="–°–∫–∞—á–∞—Ç—å"]');

deleteButtons.forEach(button => {
    button.addEventListener('click', function() {
        const fileItem = this.closest('.file-item');
        const fileName = fileItem.querySelector('.file-name').textContent;
        if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª "${fileName}"?`)) {
            fileItem.remove();
        }
    });
});

downloadButtons.forEach(button => {
    button.addEventListener('click', function() {
        const fileName = this.closest('.file-item').querySelector('.file-name').textContent;
        alert(`–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: ${fileName}`);
    });
});
