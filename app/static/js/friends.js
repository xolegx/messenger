
// –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
async function logout() {
    try {
        const response = await fetch('/auth/logout', {
            method: 'POST',
            credentials: 'include'
        });

        if (response.ok) {
            window.location.href = '/auth';
        } else {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    }
}

async function fetchUsers() {
    try {
        const response = await fetch('/auth/users');
        const users = await response.json();
        const userList = document.getElementById('user-list');
        userList.innerHTML = '';// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users.forEach(user => {
            if (user.id !== currentUserId) {
                const userElement = document.createElement('div');
                userElement.classList.add('user-item');
                userElement.setAttribute('data-user-id', user.id);
                userElement.setAttribute('status', user.status);
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å —É—á–µ—Ç–æ–º –∞–≤–∞—Ç–∞—Ä–∞, –∏–º–µ–Ω–∏ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                userElement.innerHTML = `
                    <span style="font-size: 30px;">${avatars[user.avatar] || "üë§"}  </span>
                    <div style="margin-left: 10px;"> <div>${user.name}</div>
                    </div><button class="add-friend-btn" data-user-id="${user.id}">+</button>
                `;
                const addButton = userElement.querySelector('.add-friend-btn');
                addButton.addEventListener('click', async () =>  {
                    await addFriend(user.id);
                });
                userList.appendChild(userElement);
            }
        });
        userItems = document.querySelectorAll('.user-item');
        search();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    }
}


async function fetchFriends() {
    try {
        const response = await fetch('/friends');
        const friends = await response.json();
        //console.log(friends)
        const friendList = document.getElementById('friends-list');
        friendList.innerHTML = '';
        friends.forEach(friend => {
            if (friend.id !== currentUserId) {
                const friendElement = document.createElement('div');
                friendElement.classList.add('friend-item');
                friendElement.setAttribute('data-friend-id', friend.id);
                friendElement.innerHTML = `
                    <span style="font-size: 30px;">${avatars[friend.avatar] || "üë§"}  </span>
                    <div style="margin-left: 10px;"> <div>${friend.name}</div>
                        
                    </div><button class="del-friend-btn" data-friend-id="${friend.id}">-</button>
                `;
                const addButton = friendElement.querySelector('.del-friend-btn');
                addButton.addEventListener('click', async () =>  {
                    await delFriend(friend.id);
                });
                friendList.appendChild(friendElement);
            }
        });

       
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π:', error);
    }
}


async function addFriend(user_id) {
    try {
        const response = await fetch(`/friends/add/${user_id}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
        });
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞');
        }
        const result = await response.json();
        fetchFriends();
        fetchUsers();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥—Ä—É–≥–∞:', error);
    }
}


async function delFriend(friends_id) {
    try {
        const response = await fetch(`/friends/remove/${friends_id}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            },
        });
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞');
        }
        const result = await response.json();
        fetchFriends();
        fetchUsers();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—Ä—É–≥–∞:', error);
    }
}


async function checkUnreadMessages() {
            try {
                const response = await fetch('/chat/messages/unread_counts/');
                const data = await response.json();

                const unreadCounts = data.unread_counts;
                const totalUnread = Object.values(unreadCounts).reduce((a, b) => a + b, 0);
                
                // –ò–∑–º–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if (totalUnread > 0) {
                    document.title = `(${totalUnread}) –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è`;
                } else {
                    document.title = "–ú–æ–∏ –¥—Ä—É–∑—å—è";
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
            }
        }
setInterval(checkUnreadMessages, 3000);


async function search() {
    
    try {
        const searchInput = document.querySelector('.search-input');
        searchInput.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            userItems.forEach(item => {
                const userName = item.textContent.toLowerCase().trim();
                if (userName.includes(searchTerm)) {
                    item.style.display = 'flex'; // –ò–ª–∏ 'block', –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π —Ä–∞–∑–º–µ—Ç–∫–∏
                } else {
                    item.style.display = 'none';
                }
            });
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞:', error);
    }
}


document.addEventListener('DOMContentLoaded', () => {
    fetchUsers();
    fetchFriends();
    search();
});

let userItems;
const avatars = ['üë©','üë®','üßë','üëß','üë¶','üßí','üë∂','üëµ','üë¥','üßì','üë©‚Äçü¶∞','üë®‚Äçü¶∞','üë©‚Äçü¶±','üë®‚Äçü¶±','üë©‚Äçü¶≤','üë®‚Äçü¶≤','üë©‚Äçü¶≥','üë®‚Äçü¶≥','üë±‚Äç‚ôÄÔ∏è','üë±‚Äç‚ôÇÔ∏è','üë∏','ü§¥','üë≥‚Äç‚ôÄÔ∏è','üë≥‚Äç‚ôÇÔ∏è','üë≤','üßî','üëº','ü§∂','üéÖ','üë©üèª','üë®üèª','üßëüèª','üëßüèª','üë¶üèª','üßíüèª','üë∂üèª','üëµüèª','üë¥üèª','üßìüèª','üë©üèª‚Äçü¶∞','üë®üèª‚Äçü¶∞','üë©üèª‚Äçü¶±','üë®üèª‚Äçü¶±','üë©üèª‚Äçü¶≤','üë®üèª‚Äçü¶≤','üë©üèª‚Äçü¶≥','üë®üèª‚Äçü¶≥','üë±üèª‚Äç‚ôÄÔ∏è','üë±üèª‚Äç‚ôÇÔ∏è','üë∏üèª','ü§¥üèª','üë≥üèª‚Äç‚ôÄÔ∏è','üë≥üèª‚Äç‚ôÇÔ∏è','üë≤üèª','üßîüèª','üëºüèª','ü§∂üèª','üéÖüèª','üë©üèø','üë®üèø','üßëüèø','üëßüèø','üë¶üèø','üßíüèø','üë∂üèø','üëµüèø','üë¥üèø','üßìüèø','üë©üèø‚Äçü¶∞','üë®üèø‚Äçü¶∞','üë©üèø‚Äçü¶±','üë®üèø‚Äçü¶±','üë©üèø‚Äçü¶≤','üë®üèø‚Äçü¶≤','üë©üèø‚Äçü¶≥','üë®üèø‚Äçü¶≥','üë±üèø‚Äç‚ôÄÔ∏è','üë±üèø‚Äç‚ôÇÔ∏è','üë∏üèø','ü§¥üèø','üë≥üèø‚Äç‚ôÄÔ∏è','üë≥üèø‚Äç‚ôÇÔ∏è','üë≤üèø','üßîüèø','üëºüèø','ü§∂üèø','üéÖüèø','üë§'];
const settingsBtn = document.querySelector('.settings-btn');
const settingsMenu = document.querySelector('.settings-menu');
const buttonSet = document.querySelectorAll('.set-btn');

document.getElementById('main').addEventListener('click', function() {
    window.location.href = '/chat';
});
// Search functionality


settingsBtn.addEventListener('click', () => {
    settingsMenu.classList.toggle('active');
});

document.addEventListener('click', (e) => {
    if (!settingsBtn.contains(e.target) && !settingsMenu.contains(e.target)) {
        settingsMenu.classList.remove('active');
    }
});

buttonSet.forEach(button => {
    button.addEventListener('click', async () => {
        const url = button.getAttribute('data-url'); // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ data-url
        if (button.textContent === 'üö™ –í—ã–π—Ç–∏') {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
                try {
                    // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ logout –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞
                    await logout();
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—ã—Ö–æ–¥–∞:', error);
                }
                alert('–í—ã –≤—ã—à–ª–∏');
                
            }
        }else{
            window.location.href = url;
        } 
         // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    });
});

// Add friend functionality
const addFriendButtons = document.querySelectorAll('.add-friend-btn');
addFriendButtons.forEach(button => {
    button.addEventListener('click', function() {
        const userName = this.parentElement.querySelector('.user-info span').textContent;
        alert(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userName}`);
        this.disabled = true;
        this.textContent = '‚úì';
        this.style.opacity = '0.5';
    });
});